#!/usr/bin/env bash
set -euo pipefail

XDG_CACHE_HOME="${XDG_CACHE_HOME:-${XDG_HOME:-${HOME}}/.cache}"
TF_INSTALL_VERSIONS_DIR="${XDG_CACHE_HOME}/terraform/versions"
TF_INSTALL_CHECK_SUM="${TF_INSTALL_CHECK_SUM:-1}"
TF_INSTALL_CHECK_GPG="${TF_INSTALL_CHECK_GPG:-0}"

find_up() {
    name="${1}"
    search_path="${PWD}"
    while [[ "${search_path}" != "" ]]; do
        if [[ -f "${search_path}/${name}" ]]; then
            echo "${search_path}/${name}"
            return 0
        fi
        search_path="${search_path%/*}"
    done
}

get_terraform_version() {
    local version_file
    version_file="$(find_up ".terraform-version")"
    if [[ -z "${version_file}" ]]; then
        echo "TERRAFORM-PATH: No .terraform-version file found." >&2
        exit 100
    fi
    local version
    version=$(< "${version_file}")
    if [[ -z "${version}" ]]; then
        echo "TERRAFORM-PATH: No version defined in version file." >&2
        exit 101
    fi
    echo "${version}"
}

arg=${1:-}
case ${arg} in
    -a|-all)
        fd --hidden .terraform-version |
            xargs cat | sort | uniq | awk 'NF' |
            xargs -n 1 terraform-install
        exit 0
        ;;
    -l|--list)
        find "${TF_INSTALL_VERSIONS_DIR}" -mindepth 1 -maxdepth 1 -type d |
            awk -F/ '{print $NF}' | sort -V
        exit 0
        ;;
    -a|--list-all)
        curl -sSf https://releases.hashicorp.com/terraform/ |
            sed -E -n 's/.*terraform_([0-9]\.[0-9]\.[0-9]).*/\1/p' | sort -V
        exit 0
        ;;
    -h|--help)
        cat <<-EOL
terraform-install [VERSION]
[VERSION]  The version to install. 
           If ommitted, .terraform-version is used.

-a --all   Installs all versions defined in .terraform-version
           files in the current folder and all subfolders
-l --list  List installed versions
--list-all List all installable versions
-h --help this help
EOL
        exit 0
        ;;
    -*)
        echo "Unsupported arg ${arg}. See --help for valid args." >&2
        exit 1
        ;;
    *)
        version=${arg}
        ;;
esac

if [[ -z "${version:-}" ]]; then
    # try to pick up version from .terraform-version file
    version=$(get_terraform_version)
fi
TF_INSTALL_DIR="${TF_INSTALL_VERSIONS_DIR}/${version}"
if [[ -f "${TF_INSTALL_DIR}/terraform" ]]; then
    if [[ "${TF_INSTALL_AUTO:-}" != "true" ]]; then
        echo "Terraform ${version} already installed at ${TF_INSTALL_VERSIONS_DIR}/${version}" >&2
    fi
    exit 0
fi

# Determine OS
case $(uname -s) in
Darwin*) os="darwin" ;;
MSYS_NT* | CYGWIN_NT* | MINGW64*) os="windows" ;;
FreeBSD*) os="freebsd" ;;
OpenBSD*) os="openbsd" ;;
Linux*) os="linux" ;;
*)
    echo "Unsupported OS: $(uname -s)" >&2
    exit 105
    ;;
esac

# Determine Arch
case $(uname -m) in
x86_64 | amd64) arch="amd64" ;;
arm64 | aarch64) arch="arm64" ;;
*)
    echo "Unsupported Arch: $(uname -m)" >&2
    exit 106
    ;;
esac

mkdir -p "${TF_INSTALL_DIR}"
tempdir="$(mktemp -d)"
#shellcheck disable=SC2064
trap "rm -rf $tempdir" EXIT

filename="terraform_${version}_${os}_${arch}.zip"
url="https://releases.hashicorp.com/terraform/${version}/${filename}"
echo "Downloading $url" >&2
curl "$url" -# --output-dir "${tempdir}" -O

# Verify sha256 checksum
if [[ "${TF_INSTALL_CHECK_SUM}" != "0" ]]; then
    if type sha256sum > /dev/null; then
        OLD_PWD="${PWD}"
        cd "${tempdir}"
        sumfile_name="terraform_${version}_SHA256SUMS"
        sumurl="https://releases.hashicorp.com/terraform/${version}/${sumfile_name}"
        echo "Downloading $sumurl" >&2
        curl "$sumurl" -# --output-dir "${tempdir}" -O

        # Verify sum file signature
        if [[ "${TF_INSTALL_CHECK_GPG}" != "0" ]]; then 
            if type gpg > /dev/null; then
                # import hashicorp key if not yet imported
                curl https://keybase.io/hashicorp/pgp_keys.asc -s | gpg --import
                sigfile_name="${sumfile_name}.sig"
                sigurl="https://releases.hashicorp.com/terraform/${version}/${sigfile_name}"
                echo "Downloading $sigurl" >&2
                curl "$sigurl" -# --output-dir "${tempdir}" -O
                gpg --verify "${sigfile_name}" "${sumfile_name}" 1>&2
            fi
        fi
        echo "Verifying checksum" >&2
        sha256sum -c "${sumfile_name}" --ignore-missing 1>&2
        cd "${OLD_PWD}"
    fi
fi
unzip -d "${TF_INSTALL_VERSIONS_DIR}/${version}" "${tempdir}/${filename}" >/dev/null
echo "Terraform ${version} installed at ${TF_INSTALL_VERSIONS_DIR}/${version}/terraform" >&2
